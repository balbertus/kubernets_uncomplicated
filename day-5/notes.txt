Install a cluster with kubeadm!

1. Create 3 instances at AWS, GCP or Azure (it's about your cloud environment, I am not going to show here)
	a. At least VMs medium type.
	b. 2 vCPU and 4GB mem

2. Release Firewall rules as bellow
	Control Plane TCP 6443
	All Nodes     TCP 10250-10255
	WeaveNet      TCP 6783 and 6784
      		      UDP 6783

3. Intall all updates... (I'm working within Ubuntu)
#sudo apt-get update

and configure some parameters as:
# swapoff -a
- check in case /etc/fstab

- create some modules to K8s cluister config
# /etc/modules-load.d/k8s.conf
overlay
br_netfilter
- load (without reboot)
sudo modprobe overlay
sudo modprobe br_netfilter

- prepare some Kernel parameters
#/etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
#sudo sysctl --system

- Install transport https and curl
#apt-get install apt-transport-https

Now go to add Kubeadm repository.

https://v1-33.docs.kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/

After kubeadm installation as result bellow:
#kubelet set on hold
#kubeadm set on hold
#kubectl set on hold

Check in case Container runtime is installed. (containerd)

if not follow instructions bellow

#sudo apt-get install gnupg lsb-release ca-certificates

Set up Docker's apt repository

#sudo apt-get install ca-certificates curl
#sudo install -m 0755 -d /etc/apt/keyrings
#sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
#sudo chmod a+r /etc/apt/keyrings/docker.asc

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

#sudo apt-get update

Finaly get installed Containerd

#sudo apt-get install containerd.io

Copy containerd config default to /etc/containerd/config.toml it is necessary to change system cgroup from FALSE to TRUE.

#sudo containerd config default |sudo tee /etc/containerd/config.toml

#sudo sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml

This parameter bellow needs to be true.
systemd_cgroup = true

restart containerd

Do it only on Control Plane Machine

Enabling  Kubeclt to Start our cluster

#sudo kubeadm init --pod-network-cidr=<YOUR IP> --apiserver-advertise-address=<IP to talk with nodes>

Follow instructions bellow:

Your Kubernetes control-plane has initilized successfully!

To start using your cluster, you need to run the following as a regular user:

>>>> images screenshot >>>>

Add other nodes to the cluster...

#kubeadmin join <ip:port> --token <m5ltk...> --discovery-token-ca-cert-hash <sha...>

get command line started in kubeadm join <your ip>

Install CNI - network plugin

>>>>>> screenshot <<<<<<<<

After that just play with one deployment

#kubeectl create deployment nginx --image nginx --replicas 3

>>>>> screen shot <<<<<

